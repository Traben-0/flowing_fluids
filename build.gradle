plugins {
    id 'dev.architectury.loom' version '1.7-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
    id "systems.manifold.manifold-gradle-plugin" version "0.0.2-alpha"
}


private void setupPreProcess(def index){
    println "Setting up preprocessor for version index $index"

    File indexProps = new File(projectDir,"property_variants/${index}.properties")
    println "Applying gradle.properties overrides: $indexProps.path"
    Properties properties = new Properties()
    properties.load(indexProps.newDataInputStream())

    def maxKeyLength = properties.keySet().collect { it.toString().length() }.max()
    properties.forEach { key, value ->
        //set in each project scope
        gradle.rootProject.setProperty(key as String, value)
        project.setProperty(key as String, value)
        subprojects.forEach { it.setProperty(key as String, value)}

        println " - ${key.padRight(maxKeyLength)} = $value"
    }

    new File(projectDir,"build.properties").text = """
    MC_18   = 0
    MC_19_2 = 1
    MC_19_4 = 2
    MC_20_1 = 3
    MC_20_2 = 4
    MC_20_4 = 5
    MC_20_6 = 6
    MC_21   = 7
    MC_21_2 = 8
    MC      = ${index}
    CREATE  = ${project.create_enabled as int}
    """

}
setupPreProcess(rootProject.mc_build)

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    apply plugin: 'systems.manifold.manifold-gradle-plugin'

    group = rootProject.maven_group
    version = rootProject.mod_version

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        var version = rootProject.java_version as int
        if (version == 17){
            sourceCompatibility = JavaVersion.VERSION_17
            targetCompatibility = JavaVersion.VERSION_17
        } else if (version == 21){
            sourceCompatibility = JavaVersion.VERSION_21
            targetCompatibility = JavaVersion.VERSION_21
        } else {
            println "Unsupported Java version $version, defaulting to 17"
            sourceCompatibility = JavaVersion.VERSION_17
            targetCompatibility = JavaVersion.VERSION_17
        }

    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = rootProject.java_version as int
        it.options.compilerArgs += ["-Xplugin:Manifold"]
    }
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "$rootProject.archives_name-$project.name-$project.minecraft_version"
    }

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.

        maven { url "https://maven.parchmentmc.org" }
        maven { url "https://mvnrepository.com/artifact/com.demonwav.mcdev/annotations" }

        if (project.create_enabled as int == 1) {
            maven { // Flywheel
                url = "https://maven.tterrag.com/"
                content {
                    // need to be specific here due to version overlaps
                    includeGroup("com.jozufozu.flywheel")
                }
            }
        }
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"

        if(rootProject.parchment_version != "no") {
            println "Using Parchment mappings ${rootProject.parchment_version}"
            mappings loom.layered() {
                officialMojangMappings()
                parchment("org.parchmentmc.data:parchment-${rootProject.parchment_version}@zip")
            }
        }else{
            println "Not using Parchment mappings"
            mappings loom.officialMojangMappings()
        }

        implementation 'com.demonwav.mcdev:annotations:2.1.0'

        //annotationProcessor 'systems.manifold:manifold-preprocessor:2023.1.17'
        annotationProcessor 'systems.manifold:manifold-preprocessor:2024.1.35'
    }

    processResources {
        inputs.property "version", rootProject.mod_version
        inputs.property "compatible_mc_fabric", rootProject.compatible_mc_fabric
        inputs.property "compatible_mc_forge", rootProject.compatible_mc_forge

        filesMatching("fabric.mod.json") {
            expand(["version": rootProject.mod_version,
                    "compatible_mc_fabric": rootProject.compatible_mc_fabric])
        }
        filesMatching("META-INF/mods.toml") {
            expand(["version": rootProject.mod_version,
                    "compatible_mc_forge": rootProject.compatible_mc_forge])
        }
        filesMatching("META-INF/neoforge.mods.toml") {
            expand(["version": rootProject.mod_version,
                    "compatible_mc_forge": rootProject.compatible_mc_forge])
        }

    }



    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }
}