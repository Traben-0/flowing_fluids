plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }

    if (rootProject.mc_build as int == 7) {
        maven { url = "https://maven.createmod.net" } // Create, Ponder, Flywheel
        maven { url = "https://mvn.devos.one/snapshots" } // Registrate
        maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // ForgeConfigAPIPort
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

//    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')

    if (rootProject.mc_build as int == 7) {
        // Create and its dependencies
        modImplementation("com.simibubi.create:create-${minecraft_version}:${create_forge_version}:slim") { transitive = false }
        implementation("net.createmod.ponder:Ponder-NeoForge-${minecraft_version}:${forge_ponder_version}")
        modImplementation("com.tterrag.registrate:Registrate:${registrate_forge_version}")
        modImplementation("dev.engine-room.flywheel:flywheel-neoforge-${flywheel_forge_minecraft_version}:${flywheel_forge_version}")
    }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
    atAccessWideners.add("flowing_fluids_${project.mc_build}.accesswidener")
}
